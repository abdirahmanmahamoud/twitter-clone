
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AccountType {
  profile
  business
  government
}
 
model User {
  id            String @id @default(cuid())
  name          String?
  email         String @unique
  emailVerified DateTime?
  image         String?
  username      String?
  bio           String?
  location      String?
  url           String?
  password      String?
  accountType   AccountType @default(profile)
  verifiedBtn      Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  accountLabel  AccountLabel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountLabel {
  id           String @id @default(cuid())
  accountId    String
  accountLabel String
  userId    User @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String @unique
  userId       String
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}